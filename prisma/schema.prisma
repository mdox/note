generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ...

model Note {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  docs        Doc[]
  comments    Comment[]
  title       String    @default("")
  desc        String    @default("")
  bodyHtml    String    @default("")
  bodyJson    String    @default("")
  stage       String
  publishedAt String    @default("")
}

model Doc {
  path   String @unique
  note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId Int
  stage  String
}

model Comment {
  id        Int    @id @default(autoincrement())
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  note      Note   @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId    Int
  bodyHtml  String
  createdAt String
}

// ...

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id       String    @id @default(cuid())
  name     String    @unique
  email    String    @unique
  accounts Account[]
  sessions Session[]
  notes    Note[]
  comments Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
